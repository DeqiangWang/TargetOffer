# coding:utf-8
'''
    author : minning 
    Date : 2017/7/23
    代码目的：剑指offer 第 10 题
            题目：输入一个整数，输出该数二进制表示中 1 的个数。其中负数用补码表示。
            思考：如果一个整数不为 0，那么这个整数至少有一位是 1。
                如果我们把这个整数减 1，那么原来处在整数最右边的 1 就会变为 0，
                原来在 1 后面的所有的 0 都会变成 1(如果最右边的 1 后面还有 0 的话)。
                其余所有位将不会受到影响。

                举个例子：一个二进制数 1100，从右边数起第三位是处于最右边的一个 1。
                减去 1 后，第三位变成 0，它后面的两位 0 变成了 1，而前面的 1 保持不变，
                 因此得到的结果是 1011.
                 我们发现减 1 的结果是把最右边的一个 1 开始的所有位都取反了。
                 这个时候如果我们再把原来的整数和减去 1 之后的结果做与运算，
                 从原来整数最右边一个 1 那一位开始所有位都会变成 0。如 1100&1011=1000.
                 也就是说，把一个整数减去 1，再和原整数做与运算，会把该整数最右边一个 1 变成 0.
                 那么一个整数的二进制有多少个 1，就可以进行多少次这样的操作。

                 对于负数，将其与 0xFFFFFFFF进行与操作，使其变成补码形式表示
'''


class Solution(object):
    def NumberOf1(self, n):

        count = 0
        if n<0:
            n = n & 0xFFFFFFFF
        while n:
            count += 1
            n = n & (n-1)
        return count


s = Solution()
print s.NumberOf1(5)  # 2
print s.NumberOf1(-1)  # 32

